year,
sequel_years[,6])[year_match]
output <- model.data[year_match,] %>%
mutate(method = "Inconsistent Year",
url = get_model_url(quote_id))
## Check doesn't match pattern
pat_match <- is.na(sequel_years[,1])
## suggestions from info team - match inception, assured and limit/deductible
yoa_from <- min(as.POSIXlt(model.data$inception_date)$year + 1900)
yoa_to <- max(as.POSIXlt(model.data$inception_date)$year + 1900)
info.data <- get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
filter(Assured != "") %>%
mutate(incept_date = as.Date(InceptionDate)) %>%
select(Assured,incept_date,Limit,Deductible, RiskRef) %>%
group_by(Assured,incept_date,Limit,Deductible) %>%
## can be a sequel_id for each blockstat - just take the first as this is only to offer
## a suggestion
distinct()
model.data$id <- 1:nrow(model.data)
match.data <- model.data %>%
mutate(incept_date = as.Date(inception_date)) %>%
left_join(info.data,
by = c("assured_name" = "Assured",
"incept_date",
"limit" = "Limit",
"deductible" = "Deductible"))
#
#
#   View(x<-match.data %>%
#          group_by(id) %>%
#          summarise(count=n()) %>%
#          arrange(desc(count)))
#
#   match.data %>% filter(id == 418)
#
#   model.data %>% filter(id == 236)
#
#   info.data %>% filter(Assured == "CONIFER INSURANCE COMPANY")
#
model.data$suggestion[pat_match] <- match.data$RiskRef[pat_match]
## add to output
output <- output %>%
rbind(model.data[pat_match,] %>%
mutate(method = "Invalid Sequel ID",
url = get_model_url(quote_id)))
return(output)
}
View(get_funky_sequel_matches())
conn_string <- 'driver={SQL Server};server=gblontpd54;database=pricing_prod;uid=pricingteam;pwd=F4raday00'
## set up connection
con <- odbcDriverConnect(conn_string)
query <- "select
l.sequel_id,
l.layer_no,
s.limit,
s.deductible,
a.assured_name,
qv.quote_id,
qv.quote_version_no,
qv.inception_date
from dbo.quote_version qv
inner join dbo.layer l on l.quote_version_id = qv.quote_version_id
inner join dbo.section s on s.layer_id = l.layer_id
inner join dbo.quote_master qm on qv.quote_id = qm.quote_id
inner join ref.assured a on a.assured_id = qm.assured_id
where
qv.is_deleted = 'N'
and l.is_deleted = 'N'
and l.sequel_id is not null
and s.section_letter = 'A'
and s.is_deleted = 'N'
and qv.is_selected_final = 'Y'"
## execute query
model.data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
## close connection
odbcClose(con)
## Various checks on Sequel IDs
sequel_regex <- "([A-Za-z]{2})([0-9]{3})([A-Za-z])([0-9]{2})([A-Za-z][0-9]{3})"
## suggestion Sequel ID
model.data$suggestion <- NA
## Check inception year against year from Sequel ID
year <- as.character(as.POSIXlt(model.data$inception_date)$year - 100)
sequel_years <- str_match(model.data$sequel_id,sequel_regex)
year_match <- (year != sequel_years[,5]) & (!is.na(sequel_years[,5]))
model.data$suggestion[year_match] <- paste0(sequel_years[,2],
sequel_years[,3],
sequel_years[,4],
year,
sequel_years[,6])[year_match]
output <- model.data[year_match,] %>%
mutate(method = "Inconsistent Year",
url = get_model_url(quote_id))
## Check doesn't match pattern
pat_match <- is.na(sequel_years[,1])
## suggestions from info team - match inception, assured and limit/deductible
yoa_from <- min(as.POSIXlt(model.data$inception_date)$year + 1900)
yoa_to <- max(as.POSIXlt(model.data$inception_date)$year + 1900)
info.data <- get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
filter(Assured != "") %>%
mutate(incept_date = as.Date(InceptionDate)) %>%
select(Assured,incept_date,Limit,Deductible, RiskRef) %>%
group_by(Assured,incept_date,Limit,Deductible) %>%
## can be a sequel_id for each blockstat - just take the first as this is only to offer
## a suggestion
distinct()
model.data$id <- 1:nrow(model.data)
match.data <- model.data %>%
mutate(incept_date = as.Date(inception_date)) %>%
left_join(info.data,
by = c("assured_name" = "Assured",
"incept_date",
"limit" = "Limit",
"deductible" = "Deductible"))
model.data$suggestion[pat_match] <- match.data$RiskRef[pat_match]
## add to output
output <- output %>%
rbind(model.data[pat_match,] %>%
mutate(method = "Invalid Sequel ID",
url = get_model_url(quote_id)))
get_funky_sequel_matches <- function(){
conn_string <- 'driver={SQL Server};server=gblontpd54;database=pricing_prod;uid=pricingteam;pwd=F4raday00'
## set up connection
con <- odbcDriverConnect(conn_string)
query <- "select
l.sequel_id,
l.layer_no,
s.limit,
s.deductible,
a.assured_name,
qv.quote_id,
qv.quote_version_no,
qv.inception_date
from dbo.quote_version qv
inner join dbo.layer l on l.quote_version_id = qv.quote_version_id
inner join dbo.section s on s.layer_id = l.layer_id
inner join dbo.quote_master qm on qv.quote_id = qm.quote_id
inner join ref.assured a on a.assured_id = qm.assured_id
where
qv.is_deleted = 'N'
and l.is_deleted = 'N'
and l.sequel_id is not null
and s.section_letter = 'A'
and s.is_deleted = 'N'
and qv.is_selected_final = 'Y'"
## execute query
model.data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
## close connection
odbcClose(con)
## Various checks on Sequel IDs
sequel_regex <- "([A-Za-z]{2})([0-9]{3})([A-Za-z])([0-9]{2})([A-Za-z][0-9]{3})"
## suggestion Sequel ID
model.data$suggestion <- NA
## Check inception year against year from Sequel ID
year <- as.character(as.POSIXlt(model.data$inception_date)$year - 100)
sequel_years <- str_match(model.data$sequel_id,sequel_regex)
year_match <- (year != sequel_years[,5]) & (!is.na(sequel_years[,5]))
model.data$suggestion[year_match] <- paste0(sequel_years[,2],
sequel_years[,3],
sequel_years[,4],
year,
sequel_years[,6])[year_match]
output <- model.data[year_match,] %>%
mutate(method = "Inconsistent Year",
url = get_model_url(quote_id))
## Check doesn't match pattern
pat_match <- is.na(sequel_years[,1])
## suggestions from info team - match inception, assured and limit/deductible
yoa_from <- min(as.POSIXlt(model.data$inception_date)$year + 1900)
yoa_to <- max(as.POSIXlt(model.data$inception_date)$year + 1900)
info.data <- get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
filter(Assured != "") %>%
mutate(incept_date = as.Date(InceptionDate)) %>%
select(Assured,incept_date,Limit,Deductible, RiskRef) %>%
group_by(Assured,incept_date,Limit,Deductible) %>%
## can be a sequel_id for each blockstat - just take the first as this is only to offer
## a suggestion
distinct()
match.data <- model.data %>%
mutate(incept_date = as.Date(inception_date)) %>%
left_join(info.data,
by = c("assured_name" = "Assured",
"incept_date",
"limit" = "Limit",
"deductible" = "Deductible"))
#
#
#   View(x<-match.data %>%
#          group_by(id) %>%
#          summarise(count=n()) %>%
#          arrange(desc(count)))
#
#   match.data %>% filter(id == 418)
#
#   model.data %>% filter(id == 236)
#
#   info.data %>% filter(Assured == "CONIFER INSURANCE COMPANY")
#
model.data$suggestion[pat_match] <- match.data$RiskRef[pat_match]
## add to output
output <- output %>%
rbind(model.data[pat_match,] %>%
mutate(method = "Invalid Sequel ID",
url = get_model_url(quote_id)))
return(output)
}
View(get_funky_sequel_matches())
info.data %>% filter(Assured == "HIGHMARK CASUALTY INS CO")
get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>% filter(Assured == "HIGHMARK CASUALTY INS CO")
info.data %>% filter(Assured == "HIGHMARK CASUALTY INS CO")
get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
mutate(incept_date = as.Date(InceptionDate)) %>%
filter(Assured == "HIGHMARK CASUALTY INS CO")
get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
mutate(incept_date = as.Date(InceptionDate, "%Y-%m-%d %H:%M:%S")) %>%
filter(Assured == "HIGHMARK CASUALTY INS CO")
mutate(incept_date = as.Date(InceptionDate, "%Y-%m-%d %H:%M:%S"), tz="UTC") %>%
filter(Assured == "HIGHMARK CASUALTY INS CO")
get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
mutate(incept_date = as.Date(InceptionDate, "%Y-%m-%d %H:%M:%S"), tz="UTC") %>%
filter(Assured == "HIGHMARK CASUALTY INS CO")
get_info_team_policy_info<- function(yoa_from,
yoa_to,
reporting_level = "class",
reporting_values,
syndicate = c(1192,435)){
server = "FARADAYWAREHOUSE"
database = "FaradayInfoTeam"
user = ""
password = ""
## set up query with parameters
r_level <- tolower(reporting_level)
level <- ifelse(r_level == "class", "fsg.classtype",
ifelse(r_level == "minorclass",
"fsg.minorclass",
"fsr.actuarialatg"))
values <- paste0("'",reporting_values,"'", collapse=",")
synd <- paste(as.character(syndicate), collapse=",")
query <- "SELECT
fsg.Classtype
, fsg.majorclassDesc
, fsg.minorclass
, fsr.actuarialATG as AATG
, FSR.SyndRef
, FSR.RiskRef
, fsr.PrevRiskRef
, fsr.PrevYoA
, fsr.leadind
, fsr.LeadUW
, fsr.LeadLine
, FSR.UWDetailsComplete
, FSR.CurrUw
, FSR.YoA
, FSr.Block
, FSr.Stat
, FSR.InsType
, fsr.InsTypeDesc
, FSR.PeriodType
, FSR.Assured
, FSR.Programref
, FSR.InceptionDate
, FSR.ExpiryDate
, FSR.LineStatus
, FSR.LimitCCYiso
, FSR.Limit
, FSR.Deductible
, FSR.SignedLine
, FSR.SignedOrder
, FSR.WrittenLine
, FSR.EstSignedLine
FROM
FaradayWarehouse.dbo.FW_D_Risk as FSR
LEFT OUTER JOIN
FaradayReporting.dbo.reporting as FSG
ON FSR.BlockStat = FSG.Class AND FSR.SyndRef = FSG.SyndRef
WHERE
FSR.Syndref in (&Synd&)
and FSR.YoA between  &YearFrom& and &YearTo&
AND  &Where& in (&WhereValue&)
and fsr.actuarialATG not like '9%'"
query <- str_replace_all(query, "&AsAt&", as_at)
query <- str_replace_all(query, "&YearFrom&", yoa_from)
query <- str_replace_all(query, "&YearTo&", yoa_to)
query <- str_replace_all(query, "&Synd&", synd)
query <- str_replace_all(query, "&Where&", level)
query <- str_replace_all(query, "&WhereValue&", values)
## set up connection
conn_string <- if(user != ""){
paste0('driver={SQL Server};server=',server,';database=',database,';uid=', user,';pwd=',password)
}else{
paste0('driver={SQL Server};server=',server,';database=',database,';Trusted_Connection = Yes')
}
con <- odbcDriverConnect(conn_string)
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F, tz="UTC")
## close connection
odbcClose(con)
return(data)
}
get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
mutate(incept_date = as.Date(InceptionDate, "%Y-%m-%d %H:%M:%S"), tz="UTC") %>%
filter(Assured == "HIGHMARK CASUALTY INS CO")
get_info_team_policy_info<- function(yoa_from,
yoa_to,
reporting_level = "class",
reporting_values,
syndicate = c(1192,435)){
server = "FARADAYWAREHOUSE"
database = "FaradayInfoTeam"
user = ""
password = ""
## set up query with parameters
r_level <- tolower(reporting_level)
level <- ifelse(r_level == "class", "fsg.classtype",
ifelse(r_level == "minorclass",
"fsg.minorclass",
"fsr.actuarialatg"))
values <- paste0("'",reporting_values,"'", collapse=",")
synd <- paste(as.character(syndicate), collapse=",")
query <- "SELECT
fsg.Classtype
, fsg.majorclassDesc
, fsg.minorclass
, fsr.actuarialATG as AATG
, FSR.SyndRef
, FSR.RiskRef
, fsr.PrevRiskRef
, fsr.PrevYoA
, fsr.leadind
, fsr.LeadUW
, fsr.LeadLine
, FSR.UWDetailsComplete
, FSR.CurrUw
, FSR.YoA
, FSr.Block
, FSr.Stat
, FSR.InsType
, fsr.InsTypeDesc
, FSR.PeriodType
, FSR.Assured
, FSR.Programref
, FSR.InceptionDate
, FSR.ExpiryDate
, FSR.LineStatus
, FSR.LimitCCYiso
, FSR.Limit
, FSR.Deductible
, FSR.SignedLine
, FSR.SignedOrder
, FSR.WrittenLine
, FSR.EstSignedLine
FROM
FaradayWarehouse.dbo.FW_D_Risk as FSR
LEFT OUTER JOIN
FaradayReporting.dbo.reporting as FSG
ON FSR.BlockStat = FSG.Class AND FSR.SyndRef = FSG.SyndRef
WHERE
FSR.Syndref in (&Synd&)
and FSR.YoA between  &YearFrom& and &YearTo&
AND  &Where& in (&WhereValue&)
and fsr.actuarialATG not like '9%'"
query <- str_replace_all(query, "&AsAt&", as_at)
query <- str_replace_all(query, "&YearFrom&", yoa_from)
query <- str_replace_all(query, "&YearTo&", yoa_to)
query <- str_replace_all(query, "&Synd&", synd)
query <- str_replace_all(query, "&Where&", level)
query <- str_replace_all(query, "&WhereValue&", values)
## set up connection
conn_string <- if(user != ""){
paste0('driver={SQL Server};server=',server,';database=',database,';uid=', user,';pwd=',password)
}else{
paste0('driver={SQL Server};server=',server,';database=',database,';Trusted_Connection = Yes')
}
con <- odbcDriverConnect(conn_string)
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
## close connection
odbcClose(con)
return(data)
}
get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
mutate(incept_date = as.Date(InceptionDate, "%Y-%m-%d %H:%M:%S"), tz="UTC") %>%
filter(Assured == "HIGHMARK CASUALTY INS CO")
get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
mutate(incept_date = as.Date(InceptionDate, "%Y-%m-%d %H:%M:%S", tz="UTC")) %>%
filter(Assured == "HIGHMARK CASUALTY INS CO")
x <- get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
mutate(incept_date = as.Date(InceptionDate, "%Y-%m-%d %H:%M:%S", tz="UTC")) %>%
filter(Assured == "HIGHMARK CASUALTY INS CO")
x$InceptionDate
attr(x$InceptionDate, "tzone")
attr(x$InceptionDate, "tz")
attr(as.POSIXlt(x$InceptionDate), "tzone")
x <- get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
mutate(incept_date = as.Date(InceptionDate, "%Y-%m-%d %H:%M:%S", tz="")) %>%
filter(Assured == "HIGHMARK CASUALTY INS CO")
View(x)
get_funky_sequel_matches <- function(){
conn_string <- 'driver={SQL Server};server=gblontpd54;database=pricing_prod;uid=pricingteam;pwd=F4raday00'
## set up connection
con <- odbcDriverConnect(conn_string)
query <- "select
l.sequel_id,
l.layer_no,
s.limit,
s.deductible,
a.assured_name,
qv.quote_id,
qv.quote_version_no,
qv.inception_date
from dbo.quote_version qv
inner join dbo.layer l on l.quote_version_id = qv.quote_version_id
inner join dbo.section s on s.layer_id = l.layer_id
inner join dbo.quote_master qm on qv.quote_id = qm.quote_id
inner join ref.assured a on a.assured_id = qm.assured_id
where
qv.is_deleted = 'N'
and l.is_deleted = 'N'
and l.sequel_id is not null
and s.section_letter = 'A'
and s.is_deleted = 'N'
and qv.is_selected_final = 'Y'"
## execute query
model.data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
## close connection
odbcClose(con)
## Various checks on Sequel IDs
sequel_regex <- "([A-Za-z]{2})([0-9]{3})([A-Za-z])([0-9]{2})([A-Za-z][0-9]{3})"
## suggestion Sequel ID
model.data$suggestion <- NA
## Check inception year against year from Sequel ID
year <- as.character(as.POSIXlt(model.data$inception_date)$year - 100)
sequel_years <- str_match(model.data$sequel_id,sequel_regex)
year_match <- (year != sequel_years[,5]) & (!is.na(sequel_years[,5]))
model.data$suggestion[year_match] <- paste0(sequel_years[,2],
sequel_years[,3],
sequel_years[,4],
year,
sequel_years[,6])[year_match]
output <- model.data[year_match,] %>%
mutate(method = "Inconsistent Year",
url = get_model_url(quote_id))
## Check doesn't match pattern
pat_match <- is.na(sequel_years[,1])
## suggestions from info team - match inception, assured and limit/deductible
yoa_from <- min(as.POSIXlt(model.data$inception_date)$year + 1900)
yoa_to <- max(as.POSIXlt(model.data$inception_date)$year + 1900)
info.data <- get_info_team_policy_info(yoa_from = yoa_from,
yoa_to,
reporting_values = "ca") %>%
filter(Assured != "") %>%
## tz ="" so as not to mess up dates!!!
mutate(incept_date = as.Date(InceptionDate, tz="")) %>%
select(Assured,incept_date,Limit,Deductible, RiskRef) %>%
group_by(Assured,incept_date,Limit,Deductible) %>%
## can be a sequel_id for each blockstat - just take the first as this is only to offer
## a suggestion
distinct()
match.data <- model.data %>%
## tz ="" so as not to mess up dates!!!
mutate(incept_date = as.Date(inception_date, tz="")) %>%
left_join(info.data,
by = c("assured_name" = "Assured",
"incept_date",
"limit" = "Limit",
"deductible" = "Deductible"))
#
#
#   View(x<-match.data %>%
#          group_by(id) %>%
#          summarise(count=n()) %>%
#          arrange(desc(count)))
#
#   match.data %>% filter(id == 418)
#
#   model.data %>% filter(id == 236)
#
info.data %>% filter(Assured == "HIGHMARK CASUALTY INS CO")
model.data$suggestion[pat_match] <- match.data$RiskRef[pat_match]
## add to output
output <- output %>%
rbind(model.data[pat_match,] %>%
mutate(method = "Invalid Sequel ID",
url = get_model_url(quote_id)))
return(output)
}
View(get_funky_sequel_matches)
View(get_funky_sequel_matches())
library(Faraday.Pricing)
