## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
## close connection
odbcClose(con)
return(data)
}
x <- get_info_team_renewal_status(inception_from = "2010-04-01",
inception_to = "2015-08-01",
expiry_from = "2010-04-01",
expiry_to = "2016-12-31",
reporting_level = "team",
reporting_values = "ca",
usd_exch_rate = 1,
cad_exch_rate = 1)
level <- ifelse(tolower(reporting_level) == "team", "anb.team", "anb.majortailgroup")
values <- paste(shQuote(reporting_values, type="cmd"), collapse=",")
synd <- paste(as.character(syndicate), collapse=",")
query <- get_info_team_query_from_meta(query_id = "RenewalStatus")$Query
query <- str_replace_all(query, "&ExpiryFrom&", expiry_from)
query <- str_replace_all(query, "&ExpiryTo&", expiry_to)
query <- str_replace_all(query, "&InceptFrom&", inception_from)
query <- str_replace_all(query, "&InceptTo&", inception_to)
query <- str_replace_all(query, "&Synd&", synd)
query <- str_replace_all(query, "&Where&", level)
query <- str_replace_all(query, "&WhereValue&", values)
query <- str_replace_all(query, "&USD&", usd_exch_rate)
query <- str_replace_all(query, "&CAD&", cad_exch_rate)
query
x <- get_info_team_renewal_status(inception_from = "2010-04-01",
inception_to = "2015-08-01",
expiry_from = "2010-04-01",
expiry_to = "2016-12-31",
reporting_level = "team",
reporting_values = "ca",
usd_exch_rate = 1,
cad_exch_rate = 1)
query
query <- "select\r\np.yoa\r,anb.team AS Team\r,anb.majortailgroup AS ATG\r,p.RenewedFromRef\r,p.PolicyRef\r,P.ProgramRef\r,p.USTerrorAct\r,cl.instype\r,cl.InsTypeDesc\r,cl.Assured\r,cl.bstat\r,cl.brokerPseud\r,cl.brokername\r,cl.leadUW\r,clfl.riskcode\r,cl.CurrUW\r,cl.incepting\r,cl.expiring\r,cl.limit\r,pl.Narr\r,cl.deductible\r,cl.lineStatus\r,cl.writtenline\r,cl.EstSignedline\r,cl.EffectiveLine\r,p.MinimumRate\r,p.MaximumRate\r,p.LossesLoaded\r,ppd.premiumtype\r,ppd.SwingRate\r,ppd.NCBRate\r,ppd.ProfitCommRate\r,pd.DeductionLevel\r\n,ft.Category\r\n,pd.DeductionValue\r,pd.ApplicablePct \r,cl.Synd\r,clfl.riskccy\r,clfl.Written\r\n,case when clfl.riskccy = 'USD' then Written\r\nwhen clfl.riskccy = 'GBP' then written * 1\r\n when clfl.riskccy = 'CAD' then written / 1 * 1\r\nelse 0 end as WrittenUSD\r\n, pa.BaseAmt\r\n, pa.Rate\r\n, pa.BaseAmt * pa.rate/100 as Total\r\n, pa.narrative\r\n\r\n,case when clfl.riskccy = 'USD' then BaseAmt\r\nwhen clfl.riskccy = 'GBP' then BaseAmt * 1\r\n when clfl.riskccy = 'CAD' then BaseAmt / 1 * 1\r\nelse 0 end as BaseAmtUSD\r\n\r\n\r\n,case when clfl.riskccy = 'USD' then pa.BaseAmt * pa.rate/100\r\nwhen clfl.riskccy = 'GBP' then pa.BaseAmt * pa.rate/100 * 1\r\n when clfl.riskccy = 'CAD' then pa.BaseAmt * pa.rate/100 / 1 * 1\r\nelse 0 end as TotalUSD\r\n\r\r\nfrom\r\nFaradaySequelUWEclipse.dbo.Policy as P\r\n\r\nleft outer join\r\nSummaries.dbo.CascadeLine as CL\r\non cl.SU_PolicyID = p.policyID\r\n\r\nleft outer join FaradaySequelUWEclipse.dbo.PolicyLimit as PL\r\non p.policyID = pl.policyID\r\n\r\nleft outer join FaradaySequelUWEclipse.dbo.PolicyPrem as PP\r\non p.policyID = pp.policyID\r\n\r\nleft outer join FaradaySequelUWEclipse.dbo.PolicyPremDetail as PPD\r\non p.policyID = ppd.policyID\r\n\r\nleft outer join FaradaySequelUWEclipse.dbo.PremAdjustment as PA\r\non pp.PolicyPremId = pa.PolicyPremId\r\n\r\nleft outer join FaradaySequelUWEclipse.dbo.PolicyDeduction as PD\r\non p.policyID = pd.policyID\r\n\r\nINNER JOIN FaradaySequelUWEclipse.dbo.FinTransCategory ft ON\r\npd.FinTransCategoryId = ft.FinTransCategoryId\r\n\r\n\r\n\r\nleft outer join \r\nSummaries.dbo.CascadeLineFinancialLatest as CLFL\r\non cl.synd = clfl.synd\r\nand cl.YOA = clfl.YOA\r\nand cl.RiskId = clfl.RiskId\r\nand cl.block = clfl.block\r\nand cl.stat = clfl.stat\r\nand cl.riskcode = clfl.riskcode\r\n\r\ninner join\r\ndbo.v_ANBstats as anb\r\non cl.synd = anb.synd\r\nand cl.block = anb.block\r\nand cl.Stat = anb.stat\r\n\r\n\r\nwhere \r\n cl.expiring BETWEEN CONVERT(DATETIME, '2010-04-01', 102)\r\n        AND CONVERT(DATETIME, '2016-12-31', 102)\r\nand cl.incepting BETWEEN CONVERT(DATETIME, '2010-04-01', 102)\r\n        AND CONVERT(DATETIME, '2015-08-01', 102)\r\nand cl.synd in(1192,435)\r\nAND anb.team in('ca')"
con <- odbcDriverConnect(conn_string)
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
x <- c("3","4")
paste("'",x,"'", collapse=",")
paste0("'",x,"'", collapse=",")
get_info_team_renewal_status <- function(server = "GBLONTPD06",
database = "WWD",
user = "",
password = "",
syndicate = c(1192,435),
inception_from,
inception_to,
expiry_from,
expiry_to,
usd_exch_rate,
cad_exch_rate,
reporting_level = "team",
reporting_values){
## set up query with parameters
level <- ifelse(tolower(reporting_level) == "team", "anb.team", "anb.majortailgroup")
values <- paste0("'",reporting_values,"'", collapse=",")
synd <- paste(as.character(syndicate), collapse=",")
query <- get_info_team_query_from_meta(query_id = "RenewalStatus")$Query
query <- str_replace_all(query, "&ExpiryFrom&", expiry_from)
query <- str_replace_all(query, "&ExpiryTo&", expiry_to)
query <- str_replace_all(query, "&InceptFrom&", inception_from)
query <- str_replace_all(query, "&InceptTo&", inception_to)
query <- str_replace_all(query, "&Synd&", synd)
query <- str_replace_all(query, "&Where&", level)
query <- str_replace_all(query, "&WhereValue&", values)
query <- str_replace_all(query, "&USD&", usd_exch_rate)
query <- str_replace_all(query, "&CAD&", cad_exch_rate)
## set up connection
conn_string <- if(user != ""){
paste0('driver={SQL Server};server=',server,';database=',database,';uid=', user,';pwd=',password)
}else{
paste0('driver={SQL Server};server=',server,';database=',database,';Trusted_Connection = Yes')
}
con <- odbcDriverConnect(conn_string)
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
## close connection
odbcClose(con)
return(data)
}
x <- get_info_team_renewal_status(inception_from = "2010-04-01",
inception_to = "2015-08-01",
expiry_from = "2010-04-01",
expiry_to = "2016-12-31",
reporting_level = "team",
reporting_values = "ca",
usd_exch_rate = 1,
cad_exch_rate = 1)
x <- get_info_team_renewal_status(inception_from = "2010-04-01",
inception_to = "2015-08-01",
expiry_from = "2010-04-01",
expiry_to = "2016-12-31",
reporting_level = "team",
reporting_values = "ca",
usd_exch_rate = 1,
cad_exch_rate = 1)
get_info_team_query_from_meta <- function(server = "GBLONTPD57",
database = "FaradayInfoTeam",
user ="",
password = "",
query_id
){
conn_string <- if(user != ""){
paste0('driver={SQL Server};server=',server,';database=',database,';uid=', user,';pwd=',password)
}else{
paste0('driver={SQL Server};server=',server,';database=',database,';Trusted_Connection = Yes')
}
## set up connection
con <- odbcDriverConnect(conn_string)
## set up query
query <- "SELECT  *
FROM MetaQuery_Current MQQ2
WHERE MQQ2.QueryID IN ('&&query_id&&')"
query <- str_replace(query, "&&query_id&&", query_id)
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
## close connection
odbcClose(con)
return(data)
}
x <- get_info_team_renewal_status(inception_from = "2010-04-01",
inception_to = "2015-08-01",
expiry_from = "2010-04-01",
expiry_to = "2016-12-31",
reporting_level = "team",
reporting_values = "ca",
usd_exch_rate = 1,
cad_exch_rate = 1)
x <- get_info_team_renewal_status(inception_from = "2015-01-01",
inception_to = "2015-08-01",
expiry_from = "2010-04-01",
expiry_to = "2016-12-31",
reporting_level = "team",
reporting_values = "ca",
usd_exch_rate = 1,
cad_exch_rate = 1)
x <- get_info_team_renewal_status(inception_from = "2015-07-01",
inception_to = "2015-08-01",
expiry_from = "2010-04-01",
expiry_to = "2016-12-31",
reporting_level = "team",
reporting_values = "ca",
usd_exch_rate = 1,
cad_exch_rate = 1)
View(x)
library(Faraday.Pricing)
x <- get_info_team_renewal_status(inception_from = "2015-07-01",
inception_to = "2015-08-01",
expiry_from = "2010-04-01",
expiry_to = "2016-12-31",
reporting_level = "team",
reporting_values = "ca",
usd_exch_rate = 1,
cad_exch_rate = 1)
x <- get_info_team_renewal_status(inception_from = "2015-07-02",
inception_to = "2015-08-01",
expiry_from = "2010-04-01",
expiry_to = "2016-12-31",
reporting_level = "team",
reporting_values = "ca",
usd_exch_rate = 1,
cad_exch_rate = 1)
View(x)
x <- get_info_team_renewal_status(inception_from = "2015-07-02",
inception_to = "2015-08-01",
expiry_from = "2010-04-01",
expiry_to = "2016-12-31",
reporting_level = "team",
reporting_values = "av",
usd_exch_rate = 1,
cad_exch_rate = 1)
View(x)
as.character(as.Date(2010-01-01) + 365*2)
as.character(as.Date("2010-01-01") + 365*2)
get_exchange_rates(c("USD","CAD"))
library(RODBCext)
library(dplyr)
library(stringr)
#' Returns exchange rates for valid currency codes. The values returned are the value of 1 unit of the
#' currency in the target currency. eg 1 GBP = X USD
#'
#' It is vectorised over currency_codes
#'
#' @param currency_codes A character vector of ISO currency codes
#' @param to_currency_code The currency for which exchange rates are required. Default is GBL
#' @param as_at_date The date at which the exchange rate was valid
#' @return A numeric vector of exchange rates
#' @examples
#' get_exchange_rates(c("USD", "HKD"), "EUR", "as.Date(2005-04-01)")
get_exchange_rates <- function(currency_codes, to_currency_code = "GBP", as_at_date = Sys.Date()){
## get previous month
dt <- as.POSIXlt(as_at_date)
year = dt$year + 1899 + ifelse(dt$mon == 0, 0, 1)
month = ifelse(dt$mon == 0, 12,dt$mon)
proc_month <- paste(year,
str_pad(month, width = 2, pad = "0"),
sep="")
pricing.con <- odbcDriverConnect('driver={SQL Server};
server=GBLONTPD57;database=FaradayPricing;trusted_connection=true')
query = "SELECT
[Ccy],
[ProcMonth],
[MonthCloseRate]
FROM [FaradayPricing].[dbo].[v_CcyRate]
WHERE ProcMonth = ?"
exch.rates <- sqlExecute(pricing.con, query = query, data = proc_month, fetch = T, stringsAsFactors = F)
odbcClose(pricing.con)
exch.rates$Ccy <- tolower(exch.rates$Ccy)
######################################################
# vectorise currency codes
c <- data.frame(ccy = tolower(as.character(currency_codes)), stringsAsFactors = F)
to_code <- tolower(as.character(to_currency_code))
to_rate <- exch.rates %>%
filter(Ccy == to_code) %>%
select(MonthCloseRate) %>%
top_n(1,1) %>%
as.numeric()
retVal <- c %>%
left_join(exch.rates, by = c("ccy" = "Ccy")) %>%
select(ccy, rate = MonthCloseRate) %>%
mutate(rate = to_rate / rate)
return(retVal)
}
#' Returns all valid currency codes as stored within the Faraday warehouse
#'
#' @examples
#' get_valid_curency_codes()
get_valid_curency_codes <-function(){
pricing.con <- odbcDriverConnect('driver={SQL Server};
server=GBLONTPD57;database=FaradayPricing;trusted_connection=true')
query = "SELECT DISTINCT
[Ccy]
FROM [FaradayPricing].[dbo].[v_CcyRate]"
ccy_codes <- sqlExecute(pricing.con, query = query, fetch = T, stringsAsFactors = F)
odbcClose(pricing.con)
return(ccy_codes$Ccy)
}
get_exchange_rates(c("USD","CAD"))
get_info_team_renewal_status <- function(server = "GBLONTPD06",
database = "WWD",
user = "",
password = "",
syndicate = c(1192,435),
inception_from,
inception_to,
reporting_level = "team",
reporting_values){
## exchange rates
exch_rates <- get_exchange_rates(c("USD","CAD"))
usd_exch_rate <- 1 / exch_rates[exch_rates$ccy=="USD","rate"]
cad_exch_rate <- 1 / exch_rates[exch_rates$ccy=="CAD","rate"]
## set up query with parameters
level <- ifelse(tolower(reporting_level) == "team", "anb.team", "anb.majortailgroup")
values <- paste0("'",reporting_values,"'", collapse=",")
synd <- paste(as.character(syndicate), collapse=",")
expiry_from <- inception_from
expiry_to <- as.character(as.Date(inception_to) + 365*2)
query <- get_info_team_query_from_meta(query_id = "RenewalStatus")$Query
query <- str_replace_all(query, "&ExpiryFrom&", expiry_from)
query <- str_replace_all(query, "&ExpiryTo&", expiry_to)
query <- str_replace_all(query, "&InceptFrom&", inception_from)
query <- str_replace_all(query, "&InceptTo&", inception_to)
query <- str_replace_all(query, "&Synd&", synd)
query <- str_replace_all(query, "&Where&", level)
query <- str_replace_all(query, "&WhereValue&", values)
query <- str_replace_all(query, "&USD&", usd_exch_rate)
query <- str_replace_all(query, "&CAD&", cad_exch_rate)
## set up connection
conn_string <- if(user != ""){
paste0('driver={SQL Server};server=',server,';database=',database,';uid=', user,';pwd=',password)
}else{
paste0('driver={SQL Server};server=',server,';database=',database,';Trusted_Connection = Yes')
}
con <- odbcDriverConnect(conn_string)
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
## close connection
odbcClose(con)
return(data)
}
get_info_team_renewal_status(inception_from = "2015-07-01",
inception_to = "2015-08-01",
reporting_level = "team",
reporting_values = "ca")
exch_rates <- get_exchange_rates(c("USD","CAD"))
usd_exch_rate <- 1 / exch_rates[exch_rates$ccy=="USD","rate"]
exch_rates <- get_exchange_rates(c("USD","CAD"))
usd_exch_rate <- 1 / exch_rates[exch_rates$ccy=="usd","rate"]
cad_exch_rate <- 1 / exch_rates[exch_rates$ccy=="cad","rate"]
get_info_team_renewal_status <- function(server = "GBLONTPD06",
database = "WWD",
user = "",
password = "",
syndicate = c(1192,435),
inception_from,
inception_to,
reporting_level = "team",
reporting_values){
## exchange rates
exch_rates <- get_exchange_rates(c("USD","CAD"))
usd_exch_rate <- 1 / exch_rates[exch_rates$ccy=="usd","rate"]
cad_exch_rate <- 1 / exch_rates[exch_rates$ccy=="cad","rate"]
## set up query with parameters
level <- ifelse(tolower(reporting_level) == "team", "anb.team", "anb.majortailgroup")
values <- paste0("'",reporting_values,"'", collapse=",")
synd <- paste(as.character(syndicate), collapse=",")
expiry_from <- inception_from
expiry_to <- as.character(as.Date(inception_to) + 365*2)
query <- get_info_team_query_from_meta(query_id = "RenewalStatus")$Query
query <- str_replace_all(query, "&ExpiryFrom&", expiry_from)
query <- str_replace_all(query, "&ExpiryTo&", expiry_to)
query <- str_replace_all(query, "&InceptFrom&", inception_from)
query <- str_replace_all(query, "&InceptTo&", inception_to)
query <- str_replace_all(query, "&Synd&", synd)
query <- str_replace_all(query, "&Where&", level)
query <- str_replace_all(query, "&WhereValue&", values)
query <- str_replace_all(query, "&USD&", usd_exch_rate)
query <- str_replace_all(query, "&CAD&", cad_exch_rate)
## set up connection
conn_string <- if(user != ""){
paste0('driver={SQL Server};server=',server,';database=',database,';uid=', user,';pwd=',password)
}else{
paste0('driver={SQL Server};server=',server,';database=',database,';Trusted_Connection = Yes')
}
con <- odbcDriverConnect(conn_string)
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
## close connection
odbcClose(con)
return(data)
}
get_info_team_renewal_status(inception_from = "2015-07-01",
inception_to = "2015-08-01",
reporting_level = "team",
reporting_values = "ca")
conn_string <- 'driver={SQL Server};server=gblontpd54;database=pricing_prod;uid=pricing_team;pwd=F4raday00'
## set up connection
con <- odbcDriverConnect(conn_string)
conn_string <- 'driver={SQL Server};server=gblontpd54;database=pricing_prod;uid=pricingteam;pwd=F4raday00'
## set up connection
con <- odbcDriverConnect(conn_string)
string_sequel <- paste0(sequel_ids, collapse = ",")
query <- "select
distinct
l.sequel_id,
l.layer_id,
seg.segment_id,
a.assured_name,
seg.ccy_code,
qv.inception_date
from dbo.quote_version qv
inner join dbo.layer l on l.quote_version_id = qv.quote_version_id
inner join dbo.quote_master qm on qv.quote_id = qm.quote_id
inner join ref.assured a on a.assured_id = qm.assured_id
inner join dbo.section s on s.layer_id = l.layer_id
inner join dbo.section_segment ss on ss.section_id = s.section_id
inner join dbo.segment seg on seg.segment_id = ss.segment_id
inner join ref.lob_type lt on lt.lob_type_code = seg.lob_type_code
where
qv.is_deleted = 'N'
and l.is_deleted = 'N'
and s.is_deleted = 'N'
and ss.is_deleted = 'N'
and qv.is_selected_final = 'Y'
and seg.lob_type_code = 'WC'"
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
query <- "select
distinct
l.sequel_id,
l.layer_id,
seg.segment_id,
a.assured_name,
seg.ccy_code,
qv.inception_date,
qv.is_selected_final
from dbo.quote_version qv
inner join dbo.layer l on l.quote_version_id = qv.quote_version_id
inner join dbo.quote_master qm on qv.quote_id = qm.quote_id
inner join ref.assured a on a.assured_id = qm.assured_id
inner join dbo.section s on s.layer_id = l.layer_id
inner join dbo.section_segment ss on ss.section_id = s.section_id
inner join dbo.segment seg on seg.segment_id = ss.segment_id
inner join ref.lob_type lt on lt.lob_type_code = seg.lob_type_code
where
qv.is_deleted = 'N'
and l.is_deleted = 'N'
and s.is_deleted = 'N'
and ss.is_deleted = 'N'
and seg.lob_type_code = 'WC'"
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
query <- "select
distinct
l.sequel_id,
a.assured_name,
qv.inception_date,
qv.is_selected_final
from dbo.quote_version qv
inner join dbo.layer l on l.quote_version_id = qv.quote_version_id
inner join dbo.quote_master qm on qv.quote_id = qm.quote_id
inner join ref.assured a on a.assured_id = qm.assured_id
where
qv.is_deleted = 'N'
and l.is_deleted = 'N'"
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
query <- "select
distinct
l.sequel_id,
l.layer_id
a.assured_name,
qv.inception_date,
qv.is_selected_final
from dbo.quote_version qv
inner join dbo.layer l on l.quote_version_id = qv.quote_version_id
inner join dbo.quote_master qm on qv.quote_id = qm.quote_id
inner join ref.assured a on a.assured_id = qm.assured_id
where
qv.is_deleted = 'N'
and l.is_deleted = 'N'"
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
query <- "select
distinct
l.sequel_id,
l.layer_id,
a.assured_name,
qv.inception_date,
qv.is_selected_final
from dbo.quote_version qv
inner join dbo.layer l on l.quote_version_id = qv.quote_version_id
inner join dbo.quote_master qm on qv.quote_id = qm.quote_id
inner join ref.assured a on a.assured_id = qm.assured_id
where
qv.is_deleted = 'N'
and l.is_deleted = 'N'"
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
query <- "select
l.sequel_id,
l.layer_id,
a.assured_name,
qv.inception_date,
qv.is_selected_final
from dbo.quote_version qv
inner join dbo.layer l on l.quote_version_id = qv.quote_version_id
inner join dbo.quote_master qm on qv.quote_id = qm.quote_id
inner join ref.assured a on a.assured_id = qm.assured_id
where
qv.is_deleted = 'N'
and l.is_deleted = 'N'"
## execute query
data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
inception_from <- "2014-01-01"
inception_to <- "2015-08-01"
con <- odbcDriverConnect(conn_string)
string_sequel <- paste0(sequel_ids, collapse = ",")
query <- "select
l.sequel_id,
l.layer_id,
a.assured_name,
qv.inception_date,
qv.is_selected_final
from dbo.quote_version qv
inner join dbo.layer l on l.quote_version_id = qv.quote_version_id
inner join dbo.quote_master qm on qv.quote_id = qm.quote_id
inner join ref.assured a on a.assured_id = qm.assured_id
where
qv.is_deleted = 'N'
and l.is_deleted = 'N'"
model.data <- sqlExecute(con, query = query, fetch = T, stringsAsFactors = F)
## close connection
odbcClose(con)
info.data <- get_info_team_renewal_status(inception_from = inception_from, inception_to = inception_to)
info.data <- get_info_team_renewal_status(inception_from = inception_from,
inception_to = inception_to,
reporting_values = "ca")
data <- info.data %>%
left_join(model.data, by = c("PolicyRef" = "sequel_id"))
report.data <- data %>%
select(PolicyRef, is_selected_final, WrittemUSD) %>%
mutate(exposure = Limit * EstSignedLine)
report.data <- data %>%
select(PolicyRef, is_selected_final, WrittenUSD) %>%
mutate(exposure = Limit * EstSignedLine)
report.data <- data %>%
select(PolicyRef, is_selected_final, WrittenUSD) %>%
mutate(exposure = limit * EstSignedLine)
report.data <- data %>%
select(PolicyRef, is_selected_final, WrittenUSD, exposure)
mutate(exposure = limit * EstSignedLine) %>%
View(data)
report.data <- data %>%
mutate(exposure = limit * EstSignedLine) %>%
select(PolicyRef, is_selected_final, WrittenUSD, exposure)
data <- info.data %>%
left_join(model.data, by = c("PolicyRef" = "sequel_id"))
report.data <- data %>%
mutate(exposure = limit * EstSignedLine) %>%
select(PolicyRef, is_selected_final, WrittenUSD, exposure)
report.data <- data %>%
mutate(exposure = limit * EstSignedline) %>%
select(PolicyRef, is_selected_final, WrittenUSD, exposure)
report.data <- data %>%
mutate(exposure = limit * EstSignedline) %>%
select(incepting, PolicyRef, is_selected_final, WrittenUSD, exposure)
inception_from
library(Faraday.Pricing)
